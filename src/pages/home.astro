---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Mappings.astro";
import { supabase } from "../db/supabase";

// TODO: need to get the login user id
const { data, error: groupError } = await supabase
  .from("ss_sheet_mappings")
  .select()
  .eq("user_id", 10);

if (!data) {
  console.error("No data returned");
}

if (groupError) {
  console.log("error " + groupError.message);
}

// const columnIds = data?.map((d) => {
//   return d.source_id + "," + d.dest_id;
// })
// console.log(JSON.stringify(data));
// console.log(columnIds?.join());
// const args = columnIds?.join().split(",")
// console.log(args);
// const { data, error: cgroupError } = await supabase
//   .from("ss_columns")
//   .select()
//   .in("ss_id", args);

// if (!data) {
//   console.error("No data returned");
// }
// console.log(JSON.stringify(cdata));

---

<Layout title="SmarterSheet.">
  <main>
    <h1>Welcome to <span class="text-gradient">SmarterSheet</span></h1>
    <audio id="clickSound" src="confetti.mp3" preload="auto"></audio>
    <button class="btn" id="confetti">click</button>

    <!-- http://localhost:4321/mapcolumns?source=8794326965741444&dest=598561041371012&webhook=1697541331937156 -->

    <ul role="list" class="link-card-grid">
      {
        data?.map((d) => {
          const ref = `mapcolumns?source=${d.source_id}&dest=${d.dest_id}&webhook=${d.webhook_id}`          
          const sourceName = d.source_id
          const destName = d.dest_id
          return (
            <Card
              href={ref}
              title={d.name}
              body="Supercharge your project with new frameworks and libraries." 
              sourceName={sourceName}
              destName={destName}             
              id={d.id}
              isEnabled={d.webhook_established!}
            />
          );
        })
      }
    </ul>
  </main>
</Layout>

<script
  src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.9.0/dist/confetti.browser.min.js"
></script>
<script>
  const buttons = document.querySelectorAll("#confetti");
  const clickSound = document.getElementById("clickSound");

  // Handle clicks on each button.
  buttons.forEach((button) => {
    button.addEventListener("click", async () => {
      clickSound.play();

      var count = 200;
      var defaults = {
        origin: { y: 0.7 },
      };

      function fire(particleRatio, opts) {
        confetti({
          ...defaults,
          ...opts,
          particleCount: Math.floor(count * particleRatio),
        });
      }

      fire(0.25, {
        spread: 26,
        startVelocity: 55,
      });
      fire(0.2, {
        spread: 60,
      });
      fire(0.35, {
        spread: 100,
        decay: 0.91,
        scalar: 0.8,
      });
      fire(0.1, {
        spread: 120,
        startVelocity: 25,
        decay: 0.92,
        scalar: 1.2,
      });
      fire(0.1, {
        spread: 120,
        startVelocity: 45,
      });
    });
  });
</script>
<style>
  main {
    padding: 1rem;
    width: 800px;
    max-width: calc(100% - 2rem);
    color: white;
    font-size: 20px;
    line-height: 1.6;
  }
  .astro-a {
    position: absolute;
    top: -32px;
    left: 50%;
    transform: translatex(-50%);
    width: 220px;
    height: auto;
    z-index: -1;
  }
  h1 {
    font-size: 4rem;
    font-weight: 400;
    line-height: 1;
    text-align: center;
    margin-bottom: 1em;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    margin-bottom: 2rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    background: linear-gradient(
      rgba(var(--accent-dark), 66%),
      rgba(var(--accent-dark), 33%)
    );
    padding: 1.5rem;
    border-radius: 8px;
  }
  .instructions code {
    font-size: 0.8em;
    font-weight: bold;
    background: rgba(var(--accent-light), 12%);
    color: rgb(var(--accent-light));
    border-radius: 4px;
    padding: 0.3em 0.4em;
  }
  .instructions strong {
    color: rgb(var(--accent-light));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 2rem;
    padding: 0;
  }
</style>
