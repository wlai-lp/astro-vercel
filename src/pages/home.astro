---
// import Layout from "../layouts/Layout.astro";
import SmarterLayout from "../layouts/SmarterLayout.astro";
import Card from "../components/Mappings.astro";
import { supabase } from "../db/supabase";

// TODO: need to get the login user id
const { data, error: groupError } = await supabase
  .from("ss_sheet_mappings")
  .select()
  .eq("user_id", 10);

if (!data) {
  console.error("No data returned");
}

if (groupError) {
  console.log("error " + groupError.message);
}

---

<SmarterLayout title="SmarterSheet.">
  <main>
    <h1>Welcome to <span class="text-gradient">SmarterSheet</span></h1>
    <audio id="clickSound" src="confetti.mp3" preload="auto"></audio>
    <button class="btn" id="confetti">click</button>

    <!-- http://localhost:4321/mapcolumns?source=8794326965741444&dest=598561041371012&webhook=1697541331937156 -->

    <ul role="list" class="link-card-grid">
      {
        data?.map((d) => {
          const ref = `mapcolumns?source=${d.source_id}&dest=${d.dest_id}&webhook=${d.webhook_id}`          
          const sourceName = d.source_id
          const destName = d.dest_id
          return (
            <Card
              href={ref}
              title={d.name}
              body="Supercharge your project with new frameworks and libraries." 
              sourceName={sourceName}
              destName={destName!}             
              id={d.id}
              isEnabled={d.webhook_established!}
            />
          );
        })
      }
    </ul>
  </main>
</SmarterLayout>

<script
  src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.9.0/dist/confetti.browser.min.js"
></script>
<script>
  const buttons = document.querySelectorAll("#confetti");
  const clickSound = document.getElementById("clickSound");

  // Handle clicks on each button.
  buttons.forEach((button) => {
    button.addEventListener("click", async () => {
      clickSound.play();

      var count = 200;
      var defaults = {
        origin: { y: 0.7 },
      };

      function fire(particleRatio, opts) {
        confetti({
          ...defaults,
          ...opts,
          particleCount: Math.floor(count * particleRatio),
        });
      }

      fire(0.25, {
        spread: 26,
        startVelocity: 55,
      });
      fire(0.2, {
        spread: 60,
      });
      fire(0.35, {
        spread: 100,
        decay: 0.91,
        scalar: 0.8,
      });
      fire(0.1, {
        spread: 120,
        startVelocity: 25,
        decay: 0.92,
        scalar: 1.2,
      });
      fire(0.1, {
        spread: 120,
        startVelocity: 45,
      });
    });
  });
</script>
