import type { APIRoute } from "astro";
import { getSheetMappingByWebhookId } from "../../db/ss_sheet_mappings";

// #REF: astro read regular request payload using async request.json()
export const POST: APIRoute = async ({ request }) => {
  console.log(request.method);
  //   console.log(await request.json());
//   const payload = await request.json();
//  #REF : Astro - you can map the variable directly to the return json element with the same name
  const { webhookId, events } = await request.json();

  // replicate logic
  // check webhook payload to see if we have a matching trigger column id
  // 1. get webhook from payload
  // 2. query ss_sheet_mappings for webhook_id, get source_trigger_column_id
  const triggerId = await getSheetMappingByWebhookId(webhookId)
  // 3. check webhook payload to see if any of it is trigger
  // 4a. if no trigger then disregard
  // 4b. if there's trigger then perfrom the update logic


  // TBD: comment logic
//   console.log(payload)
  console.log(webhookId)
  console.log(events.length)
  events.map((event:Event) => {
    console.log(event.timestamp)
  })
  

//   return new Response(JSON.stringify({ payload }), {
  return new Response(JSON.stringify({  }), {
    status: 201,
    headers: {
      "Content-Type": "application/json",
    },
  });
};

// Generated by https://quicktype.io

export interface Webhook {
    payload: Payload;
}

export interface Payload {
    nonce:         string;
    timestamp:     string;
    webhookId:     number;
    scope:         string;
    scopeObjectId: number;
    events:        Event[];
}

export interface Event {
    objectType: string;
    eventType:  string;
    id?:        number;
    userId:     number;
    timestamp:  string;
    rowId?:     number;
    columnId?:  number;
}
